#!/usr/bin/env python
# exeter_variant_db 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://documentation.dnanexus.com/developer for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import dxpy
import os
import stat
import subprocess
import time

@dxpy.entry_point('main')
def main(mins, auto_update, manual_update=None, query=None):

    # give permission to run shell script
    os.chmod("/home/dnanexus/mongodb_setup.sh", stat.S_IRWXU | stat.S_IRWXG | stat.S_IXOTH)
    os.chmod("/home/dnanexus/mongodb_shutdown.sh", stat.S_IRWXU | stat.S_IRWXG | stat.S_IXOTH)
    
    # Pseudo-code
    # This part of the code will run everytime the app is started...
    # ===============================================================
    # Download mongo docker
    # Load mongo docker
    # Set mongo docker running (with ip and mounted dir)
    # Download mongo dump file from resources
    # Run `mongorestore` on the dump file to update to last known save
    # ===============================================================
    
    # run mongo setup script
    subprocess.run("/home/dnanexus/mongodb_setup.sh")

    # auto_update == True
    # ===============================================================
    # This will trigger an automatic upload of data from any families that haven't
    # already been had their data uploaded.
    # Will need some way to flag which families have had data uploaded.
    #   - A file in the family folder AND
    #   - Some kind of database check
    # ===============================================================

    # manual_update != None
    # ===============================================================
    # Import the data from a json file
    #   - process using python / pymongo
    #   - include some meta data?
    #   - Some kind of database check
    # ===============================================================

    # Running a query
    # ===============================================================
    # Takes in a pymongo search criteria / query
    # Run the query and output the results to a file to output
    # ===============================================================

    from pymongo import MongoClient
    client = MongoClient("mongodb://localhost:27017")
    databases = client.list_database_names()
    for db in databases:
        print(f"- {db}")

    db = client['variant_db']
    collection = db['demo']

    # add some data
    data = [
        {'firstname': 'Ben', 'lastname': 'Bunce', 'city': 'Exeter'},
        {'firstname': 'Joe', 'lastname': 'Bloggs', 'city': 'Birmingham'},
        {'firstname': 'Jane', 'lastname': 'Doe', 'city': 'Kansas'},
    ]

    for d in data:
        collection.insert_one(d)

    query_criteria = {
        'lastname': {'$regex': '^B', '$options': 'i'}
    }
    
    results = collection.find(query_criteria)

    with open("result.txt", "w") as results_file:
        for result in results:
            results_file.write(str(result))

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    result = dxpy.upload_local_file("result.txt")
    output = {}
    output["result"] = dxpy.dxlink(result)

    # This part of the code will run everytime the app finishes...
    # ===============================================================
    # Perform `mongodump` to export db data
    # Upload dump data to resources folder
    # - keep several backups?
    # ===============================================================

    # run mongodb shutdown script
    subprocess.run("/home/dnanexus/mongodb_shutdown.sh")

    if mins > 0:
        minutes = int(mins * 60)
        print(f"Extending app time by {minutes}")
        time.sleep(minutes)

    return output

dxpy.run()
